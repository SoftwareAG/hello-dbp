/*
 * Copyright © 2010 - 2018 Apama Ltd.
 * Copyright © 2013 - 2018 Software AG, Darmstadt, Germany and/or its licensors
 *
 * SPDX-License-Identifier: Apache-2.0
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 */

using com.apama.memorystore.Storage;
using com.apama.memorystore.Store;
using com.apama.memorystore.Finished;
using com.apama.memorystore.Table;
using com.apama.memorystore.Row;

/*
	This event definition would normally be put into it's own file in the Apama project.
	Including inline here for simplicity.
*/

event Things {
	string				Id;
	string				Name;
	integer				Value;

	constant string     STORE	:= "HelloDBP";
	constant string     DATASET	:= "Things";

	static action getThingName( string key ) returns string
	{
		Things			thing := <Things> Storage.open( STORE ).open( DATASET ).get( key ).toAny();

		return thing.Name;
	}

	static action createThing( string key, Things value )
	{
		Table			dataset := Storage.open( STORE ).open( DATASET );
		Row 			newRow := dataset.add( key );
		newRow.setAll( value );
		newRow.commit();
	}
}

monitor HelloTerracotta {
	Finished			f;
	integer				id;
    Store               tcStore;
    Table				thingsTable;
    
	action onload {
		// Initialize the Terracotta Store (requires Terracotta server to be running).
		// This is executed once at start time to initialize the TCDB Store.

		on Finished( id = Storage.prepareDistributed( Things.STORE ) ) : f {
			if not f.success then {
				log "Terracotta DB connection not successful: " + f.status at INFO;
			}
			tcStore := Storage.open( Things.STORE );
			
			on Finished( id = tcStore.prepareFromAny( new Things ) ) as f {
				thingsTable := tcStore.open( Things.DATASET );
				//Things.createThing( "100", Things("100", "Apama Thing", 100));
			}
		}
	}
}
